---
// import { Icon } from "astro-icon";

import ThemeSwitcher from "./ThemeSwitcher.astro";


const navItems = [
    { title: "About", url: "#about" },
    { title: "Links", url: "#links" },
    { title: "Work", url: "#work" },
    { title: "Referrals", url: "#referrals" },
];
---

<header id="page-header"
    class="absolute bottom-0 z-30 flex items-center justify-between w-full px-8 py-4 text-white border-b border-transparent">
    <a class="flex items-center gap-3 hover:!text-default" href="#">
        <div data-wordmark class="text-transparent transition-all duration-300 uppercase font-brand text-2xl">Ryan
            Rampersad</div>
    </a>
    <div>
        <div class="flex items-center gap-6">
            <nav class="hidden sm:block">
                <ul class="flex items-center gap-4">
                    {navItems.map(({ title, url }) => (
                    <li>
                        <a data-compass-link href={url}>
                            {title}
                        </a>
                    </li>
                    ))}
                </ul>
            </nav>
            <button id="open-nav-button" type="button" class="btn sm:hidden" aria-label="Navigation">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                </svg>

            </button>
            <ThemeSwitcher />
        </div>
        <div id="menu-modal" class="hidden modal" aria-hidden="true">
            <div class="fixed inset-0 px-8 py-4 bg-default">
                <div class="space-y-4" role="dialog" aria-modal="true">
                    <header class="text-right">
                        <button id="close-nav-button" type="button" class="btn" aria-label="Close navigation">
                            <!-- <Icon pack="mdi" name="close" class="h-8" /> -->
                        </button>
                    </header>
                    <div class="flex justify-center">
                        <!-- <Icon name="logomark" class="h-16" /> -->
                    </div>
                    <nav>
                        <ul class="flex flex-col">
                            {navItems.map(({ title, url }) => (
                            <li>
                                <a class="block py-4 text-xl text-center" href={url}>
                                    {title}
                                </a>
                            </li>
                            ))}
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</header>

<script>
    const header: HTMLElement = document.querySelector("#page-header");
    const compassLinks: NodeListOf<HTMLElement> = document.querySelectorAll("[data-compass-link]");
    const page = document.documentElement;

    const clx = (classTuple: [string, string, string], cond: boolean) => {
        const [base, on, off] = classTuple;
        const classes = (base + " " + (cond ? on : off));
        return classes;
    };

    const headerClasses: [string, string, string] = [
        "z-30 flex items-center justify-between w-full px-8 py-4 text-white border-b border-transparent",
        "fixed top-0 bottom-auto bg-gradient-to-b from-ryan-black",
        "absolute bottom-0 bg-transparent"];

    document.addEventListener("scroll", () => {
        const d = page.clientHeight - page.scrollTop - header.offsetHeight;
        const active = d < 0;

        header.classList.toggle("fixed-header", active);

        const compassLinkClasses: [string, string, string] = [
            "text-sm p-2 transition-all duration-200",
            "bg-transparent border-transparent border-b-4 hover:border-red-500",
            "bg-black rounded border border-transparent hover:border-white"];
        compassLinks.forEach((el) => {
            el.className = clx(compassLinkClasses, active);
        })


        header.className = clx(headerClasses, active);

    });


    header.className = clx(headerClasses, false);
</script>

<style>
    /* .fixed-header {
        @apply fixed top-0 bottom-auto;
        @apply bg-gradient-to-b from-ryan-black;
    } */

    .fixed-header [data-wordmark] {
        @apply text-white;
    }

    /* .fixed-header #theme-switcher {
        @apply scale-100 ml-0;
    } */

    .modal.is-open {
        @apply block;
    }
</style>
